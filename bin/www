#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('learn1weg:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen server for socket io.
 */
var socket = require('socket.io');
var io = socket(server);
io.on('connection', function(socket){ 
  console.log('Socket connect with id =', socket.id);
  /*
  var now = Date.now();
  if (now % 2 == 0){
    socket.join('even');
  } else {
    socket.join('odd');
  }  
  io.to('even').emit('event', 'Even Room with number ' + now);
  io.to('odd').emit('event', 'Odd Room with number ' + now);
  */
  socket.on('room join', function(msg){
    
    console.log(socket.rooms);
    Object.keys(socket.rooms).filter((r) => r != socket.id).forEach((r) =>socket.leave(r));
    
    setTimeout(() => {
      socket.join(msg);
      socket.emit('room event', 'Joined Room ' + msg);
      socket.broadcast.to(msg).emit('room event', 'Someone Joined Room ' + msg);
    }, 0);
  })

  socket.on('chat', function(msg){
    console.log(msg);
    io.to(msg.room).emit('room event','<strong>'+ msg.name + '</strong> : ' + msg.chat);
  })

  socket.on('disconnect', function(){
    console.log('user disconnected');
  });
  socket.on('add data', function(msg){
    console.log('add data: ' + msg.uid, msg.name, msg.age);
    io.emit('add data', msg);
  });
  socket.on('delete data', function(msg){
    console.log('delete data: ' + msg);
    io.emit('delete data', msg);
  });
});


/**
 * Socket io with Namespace.
 */
var namespace1 = io.of('/namespace1');
var namespace2 = io.of('/namespace2');

function namespacehandler(namespace){
  return function(socket){
    socket.emit('eventns', 'You Joined ' + namespace.name);
    // just resend it
    socket.on('eventns', function(msg){
      socket.broadcast.emit('eventns', msg);
    });
  };
}

namespace1.on('connection', namespacehandler(namespace1));
namespace2.on('connection', namespacehandler(namespace2));

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
